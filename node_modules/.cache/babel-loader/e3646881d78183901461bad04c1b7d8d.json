{"ast":null,"code":"var _jsxFileName = \"/Users/qinnuoli/Desktop/react-task-tracker/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Header from './components/Header';\nimport Tasks from './components/Tasks';\nimport { useState, useEffect } from 'react';\nimport AddTask from './components/AddTask';\nimport Footer from './components/Footer';\nimport About from './components/About';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks();\n      setTasks(tasksFromServer);\n    };\n\n    getTasks();\n  }, []); // fetch tasks\n\n  const fetchTasks = async () => {\n    const res = await fetch('http://localhost:8000/tasks');\n    const data = await res.json();\n    return data;\n  }; // fetch task\n\n\n  const fetchTask = async id => {\n    const res = await fetch(`http://localhost:8000/tasks/${id}`);\n    const data = await res.json();\n    return data;\n  }; // add task\n\n\n  const addTask = async task => {\n    // const id = Math.floor(Math.random() * 10000) + 1\n    // const newTask = { id, ...task }\n    // setTasks([...tasks, newTask])\n    const res = await fetch(`http://localhost:8000/tasks`, {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(task)\n    });\n    const data = await res.json();\n    setTasks([...tasks, data]);\n  }; // delect task\n\n\n  const deleteTask = async id => {\n    await fetch(`http://localhost:8000/tasks/${id}`, {\n      method: 'DELETE'\n    });\n    setTasks(tasks.filter(task => task.id !== id));\n  }; // toggle reminder\n\n\n  const toggleReminder = async id => {\n    const taskToToggle = await fetchTask(id);\n    const updatedTask = { ...taskToToggle,\n      reminder: !taskToToggle.reminder\n    };\n    const res = await fetch(`http://localhost:8000/tasks/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(updatedTask)\n    });\n    const data = await res.json();\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      reminder: data.reminder\n    } : task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        onAdd: () => setShowAddTask(!showAddTask),\n        showAdd: showAddTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }, this), showAddTask && /*#__PURE__*/_jsxDEV(AddTask, {\n        onAdd: addTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 23\n      }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n        tasks: tasks,\n        onDelete: deleteTask,\n        onToggle: toggleReminder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 28\n      }, this) : 'No Tasks To Show', /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/about\",\n        component: About\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"pA4snfDjny2P+O1a+6NjXQ6HzBU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/qinnuoli/Desktop/react-task-tracker/src/App.js"],"names":["Header","Tasks","useState","useEffect","AddTask","Footer","About","BrowserRouter","Router","Route","App","showAddTask","setShowAddTask","tasks","setTasks","getTasks","tasksFromServer","fetchTasks","res","fetch","data","json","fetchTask","id","addTask","task","method","headers","body","JSON","stringify","deleteTask","filter","toggleReminder","taskToToggle","updatedTask","reminder","map","length"],"mappings":"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","sourcesContent":["import Header from './components/Header'\nimport Tasks from './components/Tasks'\nimport { useState, useEffect } from 'react'\nimport AddTask from './components/AddTask'\nimport Footer from './components/Footer'\nimport About from './components/About'\nimport { BrowserRouter as Router, Route} from 'react-router-dom'\n\nfunction App() {\n  const [showAddTask, setShowAddTask] = useState (false)\n\n  const [tasks, setTasks] = useState([])\n\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks()\n      setTasks(tasksFromServer)\n    }\n    getTasks()\n  }, [])\n\n// fetch tasks\nconst fetchTasks = async () => {\n  const res = await fetch('http://localhost:8000/tasks')\n  const data = await res.json()\n  return data\n}\n\n// fetch task\nconst fetchTask = async (id) => {\n  const res = await fetch(`http://localhost:8000/tasks/${id}`)\n  const data = await res.json()\n  return data\n}\n\n// add task\nconst addTask = async (task) => {\n  // const id = Math.floor(Math.random() * 10000) + 1\n  // const newTask = { id, ...task }\n  // setTasks([...tasks, newTask])\n\n  const res = await fetch(`http://localhost:8000/tasks`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json'\n    },\n    body: JSON.stringify(task)\n  })\n\n  const data = await res.json()\n  setTasks([...tasks, data])\n}\n\n // delect task\n const deleteTask = async (id) => {\n   await fetch(`http://localhost:8000/tasks/${id}`, {\n     method: 'DELETE'\n   })\n   setTasks(tasks.filter((task) => task.id !== id))\n }\n\n // toggle reminder\n const toggleReminder = async (id) => {\n  const taskToToggle = await fetchTask(id)\n  const updatedTask = {...taskToToggle, reminder: !taskToToggle.reminder}\n  const res = await fetch(`http://localhost:8000/tasks/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-type': 'application/json',\n    },\n    body: JSON.stringify(updatedTask),\n  })\n\n  const data = await res.json()\n\n  setTasks(\n    tasks.map((task) => \n    task.id === id ? { ...task, reminder: data.reminder} : task ))\n }\n\n  return (\n    <Router>\n    <div className=\"container\">\n      <Header onAdd={() => setShowAddTask(!showAddTask)} showAdd={showAddTask}/>\n      {showAddTask && <AddTask onAdd={addTask} />}\n      {tasks.length > 0 ? (<Tasks tasks={tasks} onDelete={deleteTask} onToggle={toggleReminder} />) : (\n        'No Tasks To Show'\n      )\n      }\n      <Route path='/about' component={About}></Route>\n      <Footer />\n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}